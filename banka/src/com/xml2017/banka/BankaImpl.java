
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.xml2017.banka;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.Validator;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeConstants;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Service;

import com.marklogic.client.DatabaseClient;
import com.marklogic.client.DatabaseClientFactory;
import com.marklogic.client.DatabaseClientFactory.Authentication;
import com.marklogic.client.document.XMLDocumentManager;
import com.marklogic.client.io.DocumentMetadataHandle;
import com.marklogic.client.io.JAXBHandle;
import com.marklogic.client.io.SearchHandle;
import com.marklogic.client.query.MatchDocumentSummary;
import com.marklogic.client.query.MatchLocation;
import com.marklogic.client.query.QueryManager;
import com.marklogic.client.query.StructuredQueryBuilder;
import com.marklogic.client.query.StructuredQueryDefinition;
import com.xml2017.bankaTipovi.BankaObracunskiRacun;
import com.xml2017.bankaTipovi.BankaRacunKlijenta;
import com.xml2017.centralna_import.CentralnaBanka;
import com.xml2017.centralna_import.ClearingFault;
import com.xml2017.centralna_import.RTGSFault;
import com.xml2017.schema.izvod.Izvod;
import com.xml2017.schema.izvod.Izvod.Presek;
import com.xml2017.schema.izvod.Izvod.Zaglavlje;
import com.xml2017.schema.izvod.Izvod.Presek.StavkaPreseka;
import com.xml2017.schema.mt102.Mt102;
import com.xml2017.schema.mt102.Mt102.PojedinacnaPlacanja;
import com.xml2017.schema.mt103.Mt103;
import com.xml2017.schema.mt103.Mt103.Banke;
import com.xml2017.schema.mt900.Mt900;
import com.xml2017.schema.mt910.Mt910;
import com.xml2017.schema.prenos.NalogZaPrenos;
import com.xml2017.schema.tipovi_podataka.TBanka;
import com.xml2017.schema.tipovi_podataka.TPlacanje;
import com.xml2017.schema.tipovi_podataka.TPojedinacnoPlacanje;
import com.xml2017.schema.tipovi_podataka.TUplata;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2017-06-09T02:11:16.227+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "Banka",
                      targetNamespace = "http://www.xml2017.com/banka",
//                      wsdlLocation = "file:/D:/Git/XML-WS/banka/WEB-INF/wsdl/Bank.wsdl",
                      endpointInterface = "com.xml2017.banka.Banka")
                      
public class BankaImpl implements Banka {

    private static final Logger LOG = Logger.getLogger(BankaImpl.class.getName());

    /* (non-Javadoc)
     * @see com.xml2017.banka.Banka#preuzimanjeIzvoda(com.xml2017.schema.zahtev.ZahtevZaIzvod  zahtev )*
     */
    public com.xml2017.schema.izvod.Izvod preuzimanjeIzvoda(com.xml2017.schema.zahtev.ZahtevZaIzvod zahtev) { 
        
    	Izvod izvod = new Izvod();
    	
    	if (zahtev.getRedniBrojPreseka() < 1) {
    		return null;
    	}
    	
    	long rbrMaks = zahtev.getRedniBrojPreseka() * 10;
    	long rbrMin = rbrMaks - 10;
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	// potrebni su svi nalozi iz tog dana, gde se trazeni broj racuna pojavio
    	// ili kao duznik ili kao poverilac
    	StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();
    	StructuredQueryDefinition queryDef = 
    			queryBuilder.and(
    					queryBuilder.collection("/nalozi-obradjeni"),
    					queryBuilder.value(
    							queryBuilder.element("datum-naloga"),
    							zahtev.getDatum().toString()),
    					queryBuilder.value(
    							queryBuilder.element("broj-racuna"),
    							zahtev.getBrojRacuna()));
    	
    	SearchHandle search = queryManager.search(queryDef, new SearchHandle());
    	
    	List<NalogZaPrenos> nalozi = new ArrayList<NalogZaPrenos>();
    	JAXBContext context = null;
    	try {
			context = JAXBContext.newInstance(NalogZaPrenos.class);
		} catch (JAXBException e) {
			e.printStackTrace();
		}
    	JAXBHandle<NalogZaPrenos> readHandle = new JAXBHandle<NalogZaPrenos>(context);
    	
    	for (MatchDocumentSummary docSum : search.getMatchResults()) {
    		
    		xmlDocManager.read(docSum.getUri(), readHandle);
    		nalozi.add(readHandle.get());
    		
    	}	
    	
    	try {
			context = JAXBContext.newInstance(BankaRacunKlijenta.class);
		} catch (JAXBException e) {
			e.printStackTrace();
		}
    	JAXBHandle<BankaRacunKlijenta> readHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
    	
    	queryDef =
    			queryBuilder.and(
    					queryBuilder.collection("/racuni"),
    					queryBuilder.value(
    							queryBuilder.element("banka-port"),
    							BankaService.port),
    					queryBuilder.value(
    							queryBuilder.element("broj-racuna"),
    							zahtev.getBrojRacuna()));
    	
    	search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		return null;
    	}
    	
    	xmlDocManager.read(search.getMatchResults()[0].getUri(), readHandleRacun);
    	BankaRacunKlijenta racun = readHandleRacun.get();
    	
    	Zaglavlje zaglavlje = new Zaglavlje();
    	Presek presek = new Presek();
    	
    	zaglavlje.setBrojRacuna(zahtev.getBrojRacuna());
    	zaglavlje.setDatumNaloga(zahtev.getDatum());
    	zaglavlje.setBrojPreseka(nalozi.size()/10 + 1);
    	
    	double tempStanje = racun.getStanje().doubleValue();
    	int brojNaTeret = 0;
    	int brojUKorist = 0;
    	double ukupnoNaTeret = 0;
    	double ukupnoUKorist = 0;
    	
    	for (int i = 0; i < nalozi.size(); i++) {
    		
    		if (nalozi.get(i).getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna()
    				.equals(zahtev.getBrojRacuna())) {
    			
    			// znaci da je bio na teret
    			brojNaTeret++;
    			ukupnoNaTeret += nalozi.get(i).getPodaciOPrenosu().getIznos().doubleValue();
    			tempStanje += nalozi.get(i).getPodaciOPrenosu().getIznos().doubleValue();
    			
    		}
    		else {
    			
    			// znaci da je bio u korist
    			brojUKorist++;
    			ukupnoUKorist += nalozi.get(i).getPodaciOPrenosu().getIznos().doubleValue();
    			tempStanje -= nalozi.get(i).getPodaciOPrenosu().getIznos().doubleValue();
    		}
    		
    		if (i >= rbrMin && i < rbrMaks) {
    			
    			// info o nalogu ide u ovaj presek
    			StavkaPreseka stavka = new StavkaPreseka();
    			stavka.setDatumNaloga(nalozi.get(i).getDatumNaloga());
    			stavka.setDuznikNalogodavac(nalozi.get(i).getDuznikNalogodavac());
    			stavka.setPrimalacPoverilac(nalozi.get(i).getPrimalacPoverilac());
    			stavka.setSvrhaPlacanja(nalozi.get(i).getSvrhaPlacanja());
    			
    			StavkaPreseka.PodaciOPrenosu prenos = new StavkaPreseka.PodaciOPrenosu();
    			prenos.setDatumValute(nalozi.get(i).getDatumNaloga());
    			prenos.setDuznikPrenos(nalozi.get(i).getPodaciOPrenosu().getDuznikPrenos());
    			prenos.setPoverilacPrenos(nalozi.get(i).getPodaciOPrenosu().getPoverilacPrenos());
    			prenos.setIznos(nalozi.get(i).getPodaciOPrenosu().getIznos());
    			
    			stavka.setPodaciOPrenosu(prenos);
    			
    			if (nalozi.get(i).getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna()
        				.equals(zahtev.getBrojRacuna())) {
    				stavka.setSmer("T");
    			}
    			else {
    				stavka.setSmer("K");
    			}
    			
    			presek.getStavkaPreseka().add(stavka);
    			
    		}
 
    	}
    	
    	zaglavlje.setBrojPromenaNaTeret(brojNaTeret);
    	zaglavlje.setBrojPromenaUKorist(brojUKorist);
    	zaglavlje.setUkupnoNaTeret(BigDecimal.valueOf(ukupnoNaTeret));
    	zaglavlje.setUkupnoUKorist(BigDecimal.valueOf(ukupnoUKorist));
    	zaglavlje.setPrethodnoStanje(BigDecimal.valueOf(tempStanje));
    	zaglavlje.setNovoStanje(racun.getStanje());
    	
    	izvod.setZaglavlje(zaglavlje);
    	izvod.setPresek(presek);
    	
    	return izvod;
    	
    }

    /* (non-Javadoc)
     * @see com.xml2017.banka.Banka#slanjeNalogaZaPlacanje(com.xml2017.schema.prenos.NalogZaPrenos  nalog )*
     */
    public boolean slanjeNalogaZaPlacanje(com.xml2017.schema.prenos.NalogZaPrenos nalog) { 
        
    	System.out.println("Izvrsavanje slanjeNalogaZaPlacanje, nalog: " + 
    			nalog.getIdPoruke());
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	
    	// provera da li je racun uplatioca u ovoj banci
    	StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();
    	StructuredQueryDefinition queryDef = 
    			queryBuilder.and(
    					queryBuilder.collection("/racuni"),
    					queryBuilder.value(queryBuilder.element("banka-port"), BankaService.port),
    					queryBuilder.value(queryBuilder.element("broj-racuna"), nalog.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna()));
    	
    	SearchHandle searchHandle = queryManager.search(queryDef, new SearchHandle());
    	
    	System.out.println("Provera postojanja racuna duznika u banci");
    	
    	if (searchHandle.getMatchResults().length != 1) {
    		System.out.println("Racun ne postoji u banci!");
    		return false;
    	}
    	
    	String docIdDuznik = searchHandle.getMatchResults()[0].getUri();
    	
    	JAXBContext context;
    	try {
			context = JAXBContext.newInstance(BankaRacunKlijenta.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return false;
		}
    	
    	JAXBHandle<BankaRacunKlijenta> readHandle = new JAXBHandle<BankaRacunKlijenta>(context);
    	
    	xmlDocManager.read(docIdDuznik, readHandle);
    	
    	BankaRacunKlijenta duznik = readHandle.get();
    	
    	System.out.println("Racun duznika pronadjen i procitan");
    	
    	
    	// provera da li racun primaoca postoji i da li je u ovoj banci
    	queryDef = 
    			queryBuilder.and(
    					queryBuilder.collection("/racuni"),
    					queryBuilder.value(queryBuilder.element("broj-racuna"), nalog.getPodaciOPrenosu().getPoverilacPrenos().getBrojRacuna()));
    	
    	searchHandle = queryManager.search(queryDef, new SearchHandle());
    	
    	System.out.println("Provera postojanja racuna poverioca");
    	
    	// mora postojati tacno jedan racun koji odgovara poveriocu
    	if (searchHandle.getMatchResults().length != 1) {
    		System.out.println("Nije pronadjen jedan racun koji odgovara poveriocu!");
    		return false;
    	}
    	
    	String docIdPoverilac = searchHandle.getMatchResults()[0].getUri();
    	
    	readHandle = new JAXBHandle<BankaRacunKlijenta>(context);
    	
    	xmlDocManager.read(docIdPoverilac, readHandle);
    	
    	BankaRacunKlijenta poverilac = readHandle.get();
    	
    	System.out.println("Racun poverioca pronadjen i procitan");
    	
    	if (poverilac.getBankaPort().equals(BankaService.port)) {
    		
    		System.out.println("Prenos sredstava moze da se uradi interno, u okviru banke");
    		
    		// moze da se obavi direktno prebacivanje sredstava na racun primaoca
    		duznik.setStanje(BigDecimal.valueOf(duznik.getStanje().doubleValue() - 
    				nalog.getPodaciOPrenosu().getIznos().doubleValue()));
    		
    		poverilac.setStanje(BigDecimal.valueOf(poverilac.getStanje().doubleValue() + 
    				nalog.getPodaciOPrenosu().getIznos().doubleValue()));
    		
    		String collIdRacun = "/racuni";
    		
    		DocumentMetadataHandle metadata = new DocumentMetadataHandle();
    		metadata.getCollections().add(collIdRacun);
    		
    		// context je i dalje na BankaRacunKlijenta.class
    		JAXBHandle<BankaRacunKlijenta> writeHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
    		writeHandleRacun.set(duznik);
    		xmlDocManager.write(docIdDuznik, metadata, writeHandleRacun);
    		
    		writeHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
    		writeHandleRacun.set(poverilac);
    		xmlDocManager.write(docIdPoverilac, metadata, writeHandleRacun);
    		
    		
    		// cuvanje naloga kao uspesno obavljenog
    		try {
				context = JAXBContext.newInstance(NalogZaPrenos.class);
			} catch (JAXBException e) {
				e.printStackTrace();
				return false;
			}
    		
    		JAXBHandle<NalogZaPrenos> writeHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
    		writeHandleNalog.set(nalog);
    		
    		String docIdNalog = "/nalog" + nalog.getIdPoruke();
    		String collIdNalog = "/nalozi-obradjeni";
    		
    		metadata = new DocumentMetadataHandle();
    		metadata.getCollections().add(collIdNalog);
    		
    		xmlDocManager.write(docIdNalog, metadata, writeHandleNalog);
    		
    		System.out.println("Prenos sredstava izvrsen");
    		
    	}
    	else {
    		
    		System.out.println("Prenos sredstava mora da ide preko centralne banke");
    		
    		// veza sa centralnom bankom
    		URL wsdlLocation;
			try {
				wsdlLocation = new URL("http://localhost:8080/centralna_banka/services/CentralnaBanka?wsdl");
			} catch (MalformedURLException e) {
				e.printStackTrace();
				return false;
			}
			QName serviceName = new QName("http://www.xml2017.com/centralna_banka", "CentralnaBankaService");
			QName portName = new QName("http://www.xml2017.com/centralna_banka", "CentralnaBanka");

			Service service = Service.create(wsdlLocation, serviceName);
			
			CentralnaBanka centralna = service.getPort(portName, CentralnaBanka.class);
    		
    		
    		// rtgs ili clearing?
    		if (nalog.isHitno() || nalog.getPodaciOPrenosu().getIznos().doubleValue() > 250000) {
    			
    			// rtgs
    			System.out.println("Medjubankarski promet - rtgs");
    			
    			Date date = new Date();
    			DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy-HH-mm");
    			String mt103Id = "mt103-" + dateFormat.format(date);
    			
    			GregorianCalendar gregor = new GregorianCalendar();
    			gregor.setTime(date);
    			XMLGregorianCalendar xmlGregor;
    			try {
    				xmlGregor = DatatypeFactory.newInstance().newXMLGregorianCalendarDate(
    						gregor.get(Calendar.YEAR), gregor.get(Calendar.MONTH)+1,
    						gregor.get(Calendar.DAY_OF_MONTH), DatatypeConstants.FIELD_UNDEFINED);
				} catch (DatatypeConfigurationException e) {
					e.printStackTrace();
					return false;
				}
    			
    			try {
					context = JAXBContext.newInstance(BankaObracunskiRacun.class);
				} catch (JAXBException e1) {
					e1.printStackTrace();
					return false;
				}
    			JAXBHandle<BankaObracunskiRacun> readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    			
    			xmlDocManager.read("/obracunskiRacun" + duznik.getBankaPort(), readHandleObracunski);
    			BankaObracunskiRacun obracunskiDuznik = readHandleObracunski.get();
    			
    			xmlDocManager.read("/obracunskiRacun" + poverilac.getBankaPort(), readHandleObracunski);
    			BankaObracunskiRacun obracunskiPoverilac = readHandleObracunski.get();
    			
    			// formiranje mt103
    			Mt103 mt103 = new Mt103();
    			mt103.setIdPoruke(mt103Id);
    			
    			TBanka duznikBanka = new TBanka();
    			duznikBanka.setBankAccountNumber(obracunskiDuznik.getBrojObracunskog());
    			duznikBanka.setSWIFT(duznik.getSwiftKod());
    			duznikBanka.setId("111");
    			
    			TBanka poverilacBanka = new TBanka();
    			poverilacBanka.setBankAccountNumber(obracunskiPoverilac.getBrojObracunskog());
    			poverilacBanka.setSWIFT(poverilac.getSwiftKod());
    			poverilacBanka.setId("112");
    			
    			Banke banke = new Banke();
    			banke.setBankaDuznika(duznikBanka);
    			banke.setBankaPoverioca(poverilacBanka);
    			
    			TPlacanje duznikPlacanje = new TPlacanje();
    			duznikPlacanje.setRacun(duznik.getBrojRacuna());
    			duznikPlacanje.setModel(nalog.getPodaciOPrenosu().getDuznikPrenos().getModel());
    			duznikPlacanje.setPozivNaBroj(nalog.getPodaciOPrenosu().getDuznikPrenos().getPozivNaBroj());
    			
    			TPlacanje poverilacPlacanje = new TPlacanje();
    			poverilacPlacanje.setRacun(poverilac.getBrojRacuna());
    			poverilacPlacanje.setModel(nalog.getPodaciOPrenosu().getPoverilacPrenos().getModel());
    			poverilacPlacanje.setPozivNaBroj(nalog.getPodaciOPrenosu().getPoverilacPrenos().getPozivNaBroj());
    			
    			TUplata uplata = new TUplata();
    			uplata.setDuznikZaduzenje(duznikPlacanje);
    			uplata.setPoverilacOdobrenje(poverilacPlacanje);
    			uplata.setDuznikNalogodavac(nalog.getDuznikNalogodavac());
    			uplata.setPrimalacPoverilac(nalog.getPrimalacPoverilac());
    			uplata.setSvrhaPlacanja(nalog.getSvrhaPlacanja());
    			uplata.setIznos(nalog.getPodaciOPrenosu().getIznos());
    			uplata.setSifraValute(nalog.getPodaciOPrenosu().getOznakaValute());
    			uplata.setDatumNaloga(xmlGregor);
    			uplata.setDatumValute(xmlGregor);
    			
    			mt103.setBanke(banke);
    			mt103.setUplata(uplata);
    			
    			System.out.println("Formiran mt103 sa sifrom: " + mt103.getIdPoruke());
    			
    			// komuniciranje sa centralnom - rtgs
    			Mt900 mt900Odgovor;
    			try {
					mt900Odgovor = centralna.mt103ReceiveCB(mt103);
				} catch (RTGSFault e) {
					e.printStackTrace();
					return false;
				}
    			
    			System.out.println("Dobijen odgovor od centralne banke, mt900: " + mt900Odgovor.getIdPoruke());
    			
    			// skidanje sa racuna duznika i prebacivanje na obracunski
    			String docIdObracunski = "/obracunskiRacun" + BankaService.port;
    			
    			// context je vec postavljen na BankaObracunskiRacun, mora ponovo da se
    			// procita iz baze jer je verovatno doslo do izmene, zbog metode
    			// centralne banke
    		    readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    		    xmlDocManager.read(docIdObracunski, readHandleObracunski);
    		    BankaObracunskiRacun obracunski = readHandleObracunski.get();
    			
    			duznik.setStanje(BigDecimal.valueOf(duznik.getStanje().doubleValue() - 
        				nalog.getPodaciOPrenosu().getIznos().doubleValue()));
    			
    			obracunski.setStanje(BigDecimal.valueOf(obracunski.getStanje().doubleValue() + 
    					nalog.getPodaciOPrenosu().getIznos().doubleValue()));
    			
    			// cuvanje obracunskog
    			JAXBHandle<BankaObracunskiRacun> writeHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    			writeHandleObracunski.set(obracunski);
    			
    			String collIdObracunski = "/obracunski";
        		
        		DocumentMetadataHandle metadata = new DocumentMetadataHandle();
        		metadata.getCollections().add(collIdObracunski);
        		
        		xmlDocManager.write(docIdObracunski, metadata, writeHandleObracunski);
        		
        		// cuvanje racuna duznika
        		try {
    				context = JAXBContext.newInstance(BankaRacunKlijenta.class);
    			} catch (JAXBException e) {
    				e.printStackTrace();
    				return false;
    			}
        		
        		String collIdRacun = "/racuni";
        		
        		metadata = new DocumentMetadataHandle();
        		metadata.getCollections().add(collIdRacun);
        		
        		JAXBHandle<BankaRacunKlijenta> writeHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
        		writeHandleRacun.set(duznik);
        		
        		xmlDocManager.write(docIdDuznik, metadata, writeHandleRacun);
        		
        		System.out.println("Prebacena sredstva sa racuna duznika na obracunski");
        		
        		
        		// cuvanje mt900-a kao izvrsenog
        		try {
					context = JAXBContext.newInstance(Mt900.class);
				} catch (JAXBException e) {
					e.printStackTrace();
					return false;
				}
        		
        		String docIdMt900 = "/mt900" + mt900Odgovor.getIdPoruke();
        		String collIdMt900 = "/mt900";
        		
        		metadata = new DocumentMetadataHandle();
        		metadata.getCollections().add(collIdMt900);
        		
        		JAXBHandle<Mt900> writeHandleMt900 = new JAXBHandle<Mt900>(context);
        		writeHandleMt900.set(mt900Odgovor);
        		
        		xmlDocManager.write(docIdMt900, metadata, writeHandleMt900);
        		
        		System.out.println("Sacuvan mt900");
        		
        		
        		// cuvanje naloga kao obradjenog
        		try {
    				context = JAXBContext.newInstance(NalogZaPrenos.class);
    			} catch (JAXBException e) {
    				e.printStackTrace();
    				return false;
    			}
        		
        		JAXBHandle<NalogZaPrenos> writeHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
        		writeHandleNalog.set(nalog);
        		
        		String docIdNalog = "/nalog" + nalog.getIdPoruke();
        		String collIdNalog = "/nalozi-obradjeni";
        		
        		metadata = new DocumentMetadataHandle();
        		metadata.getCollections().add(collIdNalog);
        		
        		xmlDocManager.write(docIdNalog, metadata, writeHandleNalog);
        		
        		System.out.println("Sacuvan nalog: " + nalog.getIdPoruke() + "kao obradjen");
    			
    		}
    		else {
    			
    			// priprema za clear & settle
    			System.out.println("Medjubankarski promet - clear & settle");
    			
    			// provera da li vec ima recimo cetiri naloga koji nisu obradjeni,
    			// ako ima, onda ce se pozvati clear & settle , ako ne onda ce se
    			// i ovaj nalog sacuvati kao neobradjen
    			
    			List<NalogZaPrenos> neobradjeniNalozi = new ArrayList<NalogZaPrenos>();
    			List<NalogZaPrenos> naloziIzmedjuBanaka = new ArrayList<NalogZaPrenos>();
    			
    			// nadji prvo sve neobradjene naloge 
    			try {
					context = JAXBContext.newInstance(NalogZaPrenos.class);
				} catch (JAXBException e) {
					e.printStackTrace();
					return false;
				}
    			JAXBHandle<NalogZaPrenos> readHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
    			
    			queryDef = queryBuilder.collection("/nalozi-neobradjeni");
    			
    			searchHandle = queryManager.search(queryDef, new SearchHandle());
    			
    			for (MatchDocumentSummary docSum : searchHandle.getMatchResults()) {
    				xmlDocManager.read(docSum.getUri(), readHandleNalog);
    				neobradjeniNalozi.add(readHandleNalog.get());
    			}
    			
    			// prodji kroz sve naloge koji su neobradjeni i nadji one izmedju ove dve banke
    			for (NalogZaPrenos neobradjeni : neobradjeniNalozi) {
    				
    				// pronadji racun tako da se poklapaju broj racuna iz duznika neobradjenog
    				// i port banke racuna duznika iz naloga koji se obradjuje -> ako postoji jedan,
    				// to znaci da je duznik iz neobradjenog iz iste banke kao i duznik iz
    				// naloga koji se trenutno obradjuje
    				queryDef =
        					queryBuilder.and(
        							queryBuilder.collection("/racuni"),
        							queryBuilder.value(queryBuilder.element("banka-port"), duznik.getBankaPort()),
        							queryBuilder.value(queryBuilder.element("broj-racuna"), neobradjeni.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna()));
    				
    				searchHandle = queryManager.search(queryDef, new SearchHandle());
    				
    				if (searchHandle.getMatchResults().length != 1) {
    					break;
    				}
    				
    				// pronadji racun tako da se poklapaju broj racuna iz poverioca neobradjenog
    				// i port banke racuna poverioca iz naloga koji se obradjuje -> ako postoji jedan,
    				// to znaci da je poverioc iz neobradjenog iz iste banke kao i poverioc iz
    				// naloga koji se trenutno obradjuje
    				queryDef =
        					queryBuilder.and(
        							queryBuilder.collection("/racuni"),
        							queryBuilder.value(queryBuilder.element("banka-port"), poverilac.getBankaPort()),
        							queryBuilder.value(queryBuilder.element("broj-racuna"), neobradjeni.getPodaciOPrenosu().getPoverilacPrenos().getBrojRacuna()));
    				
    				searchHandle = queryManager.search(queryDef, new SearchHandle());
    				
    				if (searchHandle.getMatchResults().length != 1) {
    					break;
    				}
    				
    				naloziIzmedjuBanaka.add(neobradjeni);
    			}
    			
    			
    			// ako ima 5 ili vise neobradjenih naloga (ukljucujuci i nalog koji se trenutno
    			// obradjuje) -> pokreni clearing i settle za dve banke
    			// ako nema, sacuvaj trenutno obradjivani nalog kao neobradjen
    			if (naloziIzmedjuBanaka.size() >= 4) {
    				
    				// pokreni clearing & settle
    				
    				System.out.println("Pokrece se clearing & settle izmedju banaka: " + 
    						duznik.getBankaPort() + " i " + poverilac.getBankaPort());
    				
    				Date date = new Date();
        			DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy-HH-mm");
        			String mt102Id = "mt102-" + dateFormat.format(date);
        			
        			GregorianCalendar gregor = new GregorianCalendar();
        			gregor.setTime(date);
        			XMLGregorianCalendar xmlGregor;
        			try {
        				xmlGregor = DatatypeFactory.newInstance().newXMLGregorianCalendarDate(
        						gregor.get(Calendar.YEAR), gregor.get(Calendar.MONTH)+1,
        						gregor.get(Calendar.DAY_OF_MONTH), DatatypeConstants.FIELD_UNDEFINED);
    				} catch (DatatypeConfigurationException e) {
    					e.printStackTrace();
    					return false;
    				}
    				
        			System.out.println("Kreiranje mt102");
        			
    				Mt102 mt102 = new Mt102();
    				mt102.setIDPoruke(mt102Id);
    				double ukupanIznos = 0;
    				
    				PojedinacnaPlacanja placanja = new PojedinacnaPlacanja();
    				
    				for (NalogZaPrenos neobradjeni : naloziIzmedjuBanaka) {
    					
    					TPojedinacnoPlacanje placanje = new TPojedinacnoPlacanje();
    					
    					placanje.setDatumNaloga(neobradjeni.getDatumNaloga());
    					placanje.setIDNalogaZaPlacanje(neobradjeni.getIdPoruke());
    					placanje.setDuznikNalogodavac(neobradjeni.getDuznikNalogodavac());
    					placanje.setPrimalacPoverilac(neobradjeni.getPrimalacPoverilac());
    					placanje.setSvrhaPlacanja(neobradjeni.getSvrhaPlacanja());
    					
    					placanje.setRacunDuznika(neobradjeni.getPodaciOPrenosu().getDuznikPrenos().getBrojRacuna());
    					placanje.setPozivNaBrojZaduzenja(neobradjeni.getPodaciOPrenosu().getDuznikPrenos().getPozivNaBroj());
    					placanje.setModelZaduzenja(neobradjeni.getPodaciOPrenosu().getDuznikPrenos().getModel());
    					
    					placanje.setRacunPoverioca(neobradjeni.getPodaciOPrenosu().getPoverilacPrenos().getBrojRacuna());
    					placanje.setPozivNaBrojOdobrenja(neobradjeni.getPodaciOPrenosu().getPoverilacPrenos().getPozivNaBroj());
    					placanje.setModelOdobrenja(neobradjeni.getPodaciOPrenosu().getPoverilacPrenos().getModel());
    					
    					placanje.setIznos(neobradjeni.getPodaciOPrenosu().getIznos());
    					placanje.setSifraValute(neobradjeni.getPodaciOPrenosu().getOznakaValute());
    					
    					placanja.getPojedinacnoPlacanje().add(placanje);
    					ukupanIznos += placanje.getIznos().doubleValue();
    				}
    				
    				mt102.setPojedinacnaPlacanja(placanja);
    				mt102.setUkupanIznos(BigDecimal.valueOf(ukupanIznos));
    				mt102.setDatum(xmlGregor);
    				mt102.setDatumValute(xmlGregor);
    				mt102.setSifraValute(placanja.getPojedinacnoPlacanje().get(0).getSifraValute());
    				
    				try {
						context = JAXBContext.newInstance(BankaObracunskiRacun.class);
					} catch (JAXBException e) {
						e.printStackTrace();
						return false;
					}
    				
    				JAXBHandle<BankaObracunskiRacun> readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    				
    				xmlDocManager.read("/obracunskiRacun" + duznik.getBankaPort(), readHandleObracunski);
    				
    				TBanka duznikBanka = new TBanka();
    				duznikBanka.setId("111");
    				duznikBanka.setBankAccountNumber(readHandleObracunski.get().getBrojObracunskog());
    				duznikBanka.setSWIFT(readHandleObracunski.get().getSwiftKod());
    				
    				readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    				
    				xmlDocManager.read("/obracunskiRacun" + poverilac.getBankaPort(), readHandleObracunski);
    				
    				TBanka poverilacBanka = new TBanka();
    				poverilacBanka.setId("112");
    				poverilacBanka.setBankAccountNumber(readHandleObracunski.get().getBrojObracunskog());
    				poverilacBanka.setSWIFT(readHandleObracunski.get().getSwiftKod());
    				
    				mt102.setBankaDuznika(duznikBanka);
    				mt102.setBankaPoverioca(poverilacBanka);
    				
    				System.out.println("Komunikacija sa centralnom bankom");
    				
    				// komunikacija sa centralnom bankom
    				Mt900 mt900Odgovor = null;
    				try {
    					mt900Odgovor = centralna.mt102ReceiveCB(mt102);
					} catch (ClearingFault e) {
						e.printStackTrace();
						return false;
					}
    				
    				System.out.println("Vracen mt900: " + mt900Odgovor.getIdPoruke());
    				
    				
    				// uskladjivanje obracunskog racuna	
    				readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    				
    				String docIdObracunski = "/obracunskiRacun" + BankaService.port;
    				String collIdObracunski = "/obracunski";
    				
    				DocumentMetadataHandle metadata = new DocumentMetadataHandle();
            		metadata.getCollections().add(collIdObracunski);
            		
            		xmlDocManager.read(docIdObracunski, readHandleObracunski);
            		
            		BankaObracunskiRacun obracunski = readHandleObracunski.get();
            		
            		obracunski.setStanje(BigDecimal.valueOf(obracunski.getStanje().doubleValue() + 
            				mt102.getUkupanIznos().doubleValue()));
            		
            		JAXBHandle<BankaObracunskiRacun> writeHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
            		
            		writeHandleObracunski.set(obracunski);
            		
            		xmlDocManager.write(docIdObracunski, metadata, writeHandleObracunski);
            		
            		
            		// uskladjivanje klijentskih racuna
            		metadata = new DocumentMetadataHandle();
        			metadata.getCollections().add("/racuni");
        			
            		for (TPojedinacnoPlacanje placanje : mt102.getPojedinacnaPlacanja().getPojedinacnoPlacanje()) {
            			
            			queryDef = 
            					queryBuilder.and(
            							queryBuilder.collection("/racuni"),
            							queryBuilder.value(queryBuilder.element("broj-racuna"), placanje.getRacunDuznika()));
            			
            			searchHandle = queryManager.search(queryDef, new SearchHandle());
            			
            			if (searchHandle.getMatchResults().length != 1) {
            				return false;
            			}
            			
            			String docIdRacun = searchHandle.getMatchResults()[0].getUri();
            			
            			try {
							context = JAXBContext.newInstance(BankaRacunKlijenta.class);
						} catch (JAXBException e) {
							e.printStackTrace();
							return false;
						}
            			
            			readHandle = new JAXBHandle<BankaRacunKlijenta>(context);
            			
            			xmlDocManager.read(docIdRacun, readHandle);
            			
            			BankaRacunKlijenta racun = readHandle.get();
            			
            			racun.setStanje(BigDecimal.valueOf(racun.getStanje().doubleValue() - 
            					placanje.getIznos().doubleValue()));
            			
            			JAXBHandle<BankaRacunKlijenta> writeHandle = new JAXBHandle<BankaRacunKlijenta>(context);
            			
            			writeHandle.set(racun);
            			
            			xmlDocManager.write(docIdRacun, metadata, writeHandle);
            		}
            		
            		
            		//uskladjivanje naloga
            		metadata = new DocumentMetadataHandle();
            		metadata.getCollections().add("/nalozi-obradjeni");
            		
            		try {
						context = JAXBContext.newInstance(NalogZaPrenos.class);
					} catch (JAXBException e1) {
						e1.printStackTrace();
						return false;
					}
            		
    				for (NalogZaPrenos neobradjeni : naloziIzmedjuBanaka) {
    					
    					JAXBHandle<NalogZaPrenos> writeHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
    					
    					writeHandleNalog.set(neobradjeni);
    					
    					String docIdNeobradjeni = "/nalog" + neobradjeni.getIdPoruke();
    					
    					xmlDocManager.write(docIdNeobradjeni, metadata, writeHandleNalog);
    				}
            		
    				
    				// cuvanje mt900-a kao izvrsenog
            		try {
    					context = JAXBContext.newInstance(Mt900.class);
    				} catch (JAXBException e) {
    					e.printStackTrace();
    					return false;
    				}
            		
            		String docIdMt900 = "/mt900" + mt900Odgovor.getIdPoruke();
            		String collIdMt900 = "/mt900";
            		
            		metadata = new DocumentMetadataHandle();
            		metadata.getCollections().add(collIdMt900);
            		
            		JAXBHandle<Mt900> writeHandleMt900 = new JAXBHandle<Mt900>(context);
            		writeHandleMt900.set(mt900Odgovor);
            		
            		xmlDocManager.write(docIdMt900, metadata, writeHandleMt900);
            		
            		System.out.println("Sacuvan mt900");
            		
            		
            		// cuvanje naloga kao obradjenog
            		try {
        				context = JAXBContext.newInstance(NalogZaPrenos.class);
        			} catch (JAXBException e) {
        				e.printStackTrace();
        				return false;
        			}
            		
            		JAXBHandle<NalogZaPrenos> writeHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
            		writeHandleNalog.set(nalog);
            		
            		String docIdNalog = "/nalog" + nalog.getIdPoruke();
            		String collIdNalog = "/nalozi-obradjeni";
            		
            		metadata = new DocumentMetadataHandle();
            		metadata.getCollections().add(collIdNalog);
            		
            		xmlDocManager.write(docIdNalog, metadata, writeHandleNalog);
            		
            		System.out.println("Sacuvan nalog: " + nalog.getIdPoruke() + "kao obradjen");		
            		
    			}
    			else {
    				
    				// sacuvaj nalog za kasniju obradu
    				
    				System.out.println("Nema dovoljno neobradjenih naloga izmedju dve banke kako bi se pokrenut clearing & settle");
    				
    				try {
        				context = JAXBContext.newInstance(NalogZaPrenos.class);
        			} catch (JAXBException e) {
        				e.printStackTrace();
        				return false;
        			}
            		
            		JAXBHandle<NalogZaPrenos> writeHandleNalog = new JAXBHandle<NalogZaPrenos>(context);
            		writeHandleNalog.set(nalog);
            		
            		String docIdNalog = "/nalog" + nalog.getIdPoruke();
            		String collIdNalog = "/nalozi-neobradjeni";
            		
            		DocumentMetadataHandle metadata = new DocumentMetadataHandle();
            		metadata.getCollections().add(collIdNalog);
            		
            		xmlDocManager.write(docIdNalog, metadata, writeHandleNalog);
            		
            		System.out.println("Sacuvan nalog: " + nalog.getIdPoruke() + "za kasniju obradu");
    				
    			}
    			
    		}
    		
    	}
    	
    	return true;  	
        
    }

    /* (non-Javadoc)
     * @see com.xml2017.banka.Banka#rtgsBanka(com.xml2017.schema.mt103.Mt103  mt103 ,)com.xml2017.schema.mt910.Mt910  mt910 )*
     */
    public void rtgsBanka(com.xml2017.schema.mt103.Mt103 mt103,com.xml2017.schema.mt910.Mt910 mt910) { 
        
    	// pronaci obracunski i racun klijenta, prebaciti sredstva sa obracunskog
    	// na racun klijenta
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	System.out.println("Uskladjivanje obracunskog racuna");
    	
    	JAXBContext context;
    	try {
			context = JAXBContext.newInstance(BankaObracunskiRacun.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	
    	System.out.println("Prosao je kontekst");
    	JAXBHandle<BankaObracunskiRacun> readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    	System.out.println("Prosao je handle");
    	DocumentMetadataHandle metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/obracunski");
    	System.out.println("Prosao je metadata");
    	
    	xmlDocManager.read("/obracunskiRacun" + BankaService.port, readHandleObracunski);
    	System.out.println("Prosao je read");
    	BankaObracunskiRacun obracunski = readHandleObracunski.get();
    	System.out.println("Obracunski je postavljen");
    	
    	System.out.println("Obracunski SWIFT: " + obracunski.getSwiftKod());
    	obracunski.setStanje(BigDecimal.valueOf(obracunski.getStanje().doubleValue() - 
    			mt103.getUplata().getIznos().doubleValue()));
    	
    	System.out.println("Azurirano stanje");
    	
    	JAXBHandle<BankaObracunskiRacun> writeHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandleObracunski.set(obracunski);
    	
    	System.out.println("Tacno pre write-a");
    	xmlDocManager.write("/obracunskiRacun" + BankaService.port, metadata, writeHandleObracunski);
    	
    	System.out.println("Obracunski racun azuriran");
    	System.out.println("Uskladivanje racuna klijenta");
    	
    	StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();
    	StructuredQueryDefinition queryDef = 
    			queryBuilder.and(
    					queryBuilder.collection("/racuni"),
    					queryBuilder.value(
    							queryBuilder.element("broj-racuna"),
    							mt103.getUplata().getPoverilacOdobrenje().getRacun()));
    	
    	SearchHandle search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		return;
    	}
    	
    	String docIdRacun = search.getMatchResults()[0].getUri();
    	
    	try {
			context = JAXBContext.newInstance(BankaRacunKlijenta.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	JAXBHandle<BankaRacunKlijenta> readHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
    	
    	xmlDocManager.read(docIdRacun, readHandleRacun);
    	BankaRacunKlijenta poverilacRacun = readHandleRacun.get();
    	
    	metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/racuni");
    	
    	poverilacRacun.setStanje(BigDecimal.valueOf(poverilacRacun.getStanje().doubleValue() + 
    			mt103.getUplata().getIznos().doubleValue()));
    	
    	JAXBHandle<BankaRacunKlijenta> writeHandleRacun = new JAXBHandle<BankaRacunKlijenta>(context);
    	writeHandleRacun.set(poverilacRacun);
    	xmlDocManager.write(docIdRacun, metadata, writeHandleRacun);
    	
    	System.out.println("Racun klijenta azuriran");
    	
    	
    	// sacuvati mt910
    	System.out.println("Cuvanje vracenog mt910-a");
    	
    	try {
			context = JAXBContext.newInstance(Mt910.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	JAXBHandle<Mt910> writeHandleMt910 = new JAXBHandle<Mt910>(context);
    	writeHandleMt910.set(mt910);
    	
    	metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/mt910");
    	
    	xmlDocManager.write("/mt910" + mt910.getIdPoruke(), metadata, writeHandleMt910);
    	
    }

    /* (non-Javadoc)
     * @see com.xml2017.banka.Banka#clearSettleBanka(com.xml2017.schema.mt102.Mt102  mt102 ,)com.xml2017.schema.mt910.Mt910  mt910 )*
     */
    public void clearSettleBanka(com.xml2017.schema.mt102.Mt102 mt102,com.xml2017.schema.mt910.Mt910 mt910) { 
        
    	// potrebno je uskladiti sve racune i obracunski, nalozi su vec sredjeni od
    	// strane druge banke
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	System.out.println("Uskladjivanje obracunskog racuna");
    	
    	JAXBContext context;
    	try {
			context = JAXBContext.newInstance(BankaObracunskiRacun.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	JAXBHandle<BankaObracunskiRacun> readHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    	
    	DocumentMetadataHandle metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/obracunski");
    	
    	xmlDocManager.read("/obracunskiRacun" + BankaService.port, readHandleObracunski);
    	BankaObracunskiRacun obracunski = readHandleObracunski.get();
    	
    	obracunski.setStanje(BigDecimal.valueOf(obracunski.getStanje().doubleValue() - 
    			mt102.getUkupanIznos().doubleValue()));
    	
    	JAXBHandle<BankaObracunskiRacun> writeHandleObracunski = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandleObracunski.set(obracunski);
    	xmlDocManager.write("/obracunskiRacun" + BankaService.port, metadata, writeHandleObracunski);
    	
    	System.out.println("Obracunski racun azuriran");
    	
    	
    	System.out.println("Uskladivanje svih racuna klijenta koji su u mt102");
    	
    	try {
			context = JAXBContext.newInstance(BankaRacunKlijenta.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	
    	// uskladjivanje klijentskih racuna
		metadata = new DocumentMetadataHandle();
		metadata.getCollections().add("/racuni");
		
		StructuredQueryDefinition queryDef;
		StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();
		JAXBHandle<BankaRacunKlijenta> readHandle;
		JAXBHandle<BankaRacunKlijenta> writeHandle;
		SearchHandle searchHandle;
		
		for (TPojedinacnoPlacanje placanje : mt102.getPojedinacnaPlacanja().getPojedinacnoPlacanje()) {
			
			queryDef = 
					queryBuilder.and(
							queryBuilder.collection("/racuni"),
							queryBuilder.value(
									queryBuilder.element("broj-racuna"),
									placanje.getRacunPoverioca()));
			
			searchHandle = queryManager.search(queryDef, new SearchHandle());
			
			if (searchHandle.getMatchResults().length != 1) {
				return;
			}
			
			String docIdRacun = searchHandle.getMatchResults()[0].getUri();
			
			readHandle = new JAXBHandle<BankaRacunKlijenta>(context);
			
			xmlDocManager.read(docIdRacun, readHandle);
			
			BankaRacunKlijenta racun = readHandle.get();
			
			racun.setStanje(BigDecimal.valueOf(racun.getStanje().doubleValue() + 
					placanje.getIznos().doubleValue()));
			
			writeHandle = new JAXBHandle<BankaRacunKlijenta>(context);
			
			writeHandle.set(racun);
			
			xmlDocManager.write(docIdRacun, metadata, writeHandle);
			
		}
    	
		System.out.println("Racuni klijenata azurirani");
    	
		
    	// sacuvati mt910
    	
		System.out.println("Cuvanje vracenog mt910-a");
    	
    	try {
			context = JAXBContext.newInstance(Mt910.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			return;
		}
    	JAXBHandle<Mt910> writeHandleMt910 = new JAXBHandle<Mt910>(context);
    	writeHandleMt910.set(mt910);
    	
    	metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/mt910");
    	
    	xmlDocManager.write("/mt910" + mt910.getIdPoruke(), metadata, writeHandleMt910);
    	
    }

}
