
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.xml2017.centralna_banka;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeConstants;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import com.marklogic.client.DatabaseClient;
import com.marklogic.client.DatabaseClientFactory;
import com.marklogic.client.DatabaseClientFactory.Authentication;
import com.marklogic.client.document.XMLDocumentManager;
import com.marklogic.client.io.DocumentMetadataHandle;
import com.marklogic.client.io.JAXBHandle;
import com.marklogic.client.io.SearchHandle;
import com.marklogic.client.query.QueryManager;
import com.marklogic.client.query.StringQueryDefinition;
import com.xml2017.banka_import.Banka;
import com.xml2017.banka_import.BankaObracunskiRacun;
import com.xml2017.schema.mt102.Mt102;
import com.xml2017.schema.mt103.Mt103;
import com.xml2017.schema.mt900.Mt900;
import com.xml2017.schema.mt910.Mt910;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2017-06-09T11:28:29.027+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "CentralnaBankaService",
                      portName = "CentralnaBanka",
                      targetNamespace = "http://www.xml2017.com/centralna_banka",
                      wsdlLocation = "WEB-INF/wsdl/centralna_banka.wsdl",
                      endpointInterface = "com.xml2017.centralna_banka.CentralnaBanka")
                      
public class CentralnaBankaImpl implements CentralnaBanka {

    private static final Logger LOG = Logger.getLogger(CentralnaBankaImpl.class.getName());

    /* (non-Javadoc)
     * @see com.xml2017.centralna_banka.CentralnaBanka#mt103ReceiveCB(com.xml2017.schema.mt103.Mt103  mt103 )*
     */
    public com.xml2017.schema.mt900.Mt900 mt103ReceiveCB(com.xml2017.schema.mt103.Mt103 mt103) throws RTGSFault    { 
        
        //throw new RTGSFault("RTGSFault...");
    	
    	System.out.println("Izvrsavanje mt103ReceiveCB: " + 
    			mt103.getIdPoruke());
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	Date date = new Date();
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy-HH-mm");
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	StringQueryDefinition queryDef = queryManager.newStringDefinition();
    	
    	
    	// Obracunski racun duznika
    	queryDef.setCriteria(mt103.getBanke().getBankaDuznika().getBankAccountNumber());
    	queryDef.setCollections("/obracunski");
    	
    	SearchHandle search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		throw new RTGSFault("Nema jedan obracunski racun za banku duznika");
    	}
    	
    	String docIdObracunskiDuznik = search.getMatchResults()[0].getUri();
    	
    	JAXBContext context;
    	try {
			context = JAXBContext.newInstance(BankaObracunskiRacun.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			throw new RTGSFault("Problem sa postavljanjem JAXBContext-a");
		}
    	
    	JAXBHandle<BankaObracunskiRacun> readHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	
    	xmlDocManager.read(docIdObracunskiDuznik, readHandle);
    	
    	BankaObracunskiRacun obracunskiDuznik = readHandle.get();
    	
    	
    	// obracunski racun poverioca
    	queryDef.setCriteria(mt103.getBanke().getBankaPoverioca().getBankAccountNumber());
    	
    	search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		throw new RTGSFault("Nema jedan obracunski racun za banku poverioca");
    	}
    	
    	String docIdObracunskiPoverilac = search.getMatchResults()[0].getUri();
    	
    	readHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	
    	xmlDocManager.read(docIdObracunskiPoverilac, readHandle);
    	
    	BankaObracunskiRacun obracunskiPoverilac = readHandle.get();
    	
    	
    	// prebacivanje sredstava
    	obracunskiDuznik.setStanje(BigDecimal.valueOf(obracunskiDuznik.getStanje().doubleValue() - 
    			mt103.getUplata().getIznos().doubleValue()));
    	
    	obracunskiPoverilac.setStanje(BigDecimal.valueOf(obracunskiPoverilac.getStanje().doubleValue() + 
    			mt103.getUplata().getIznos().doubleValue()));
    	
    	
    	// azuriranje obracunskih racuna u bazi    	
    	DocumentMetadataHandle metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/obracunski");
    	
    	JAXBHandle<BankaObracunskiRacun> writeHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandle.set(obracunskiDuznik);
    	
    	xmlDocManager.write(docIdObracunskiDuznik, metadata, writeHandle);
    	
    	writeHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandle.set(obracunskiPoverilac);
    	
    	xmlDocManager.write(docIdObracunskiPoverilac, metadata, writeHandle);
    	
    	
    	// cuvanje mt103
    	try {
			context = JAXBContext.newInstance(Mt103.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			throw new RTGSFault("Problem sa postavljanjem JAXBContext-a");
		}
    	
    	JAXBHandle<Mt103> writeHandleMt103 = new JAXBHandle<Mt103>(context);
    	writeHandleMt103.set(mt103);
    	
    	metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/mt103");
    	
    	xmlDocManager.write("/mt103" + mt103.getIdPoruke(), metadata, writeHandleMt103);
    	
    	
    	// kreiranje mt900 i mt910   	
    	Mt900 mt900 = new Mt900();
    	mt900.setIdPoruke("mt900-" + dateFormat.format(date));
    	mt900.setBankaDuznik(mt103.getBanke().getBankaDuznika());
    	mt900.setDatumValute(mt103.getUplata().getDatumValute());
    	mt900.setIznos(mt103.getUplata().getIznos());
    	mt900.setIdPorukeNaloga(mt103.getIdPoruke());
    	mt900.setSifraValute(mt103.getUplata().getSifraValute());
    	
    	Mt910 mt910 = new Mt910();
    	mt910.setIdPoruke("mt910-" + dateFormat.format(date));
    	mt910.setBankaPoverilac(mt103.getBanke().getBankaPoverioca());
    	mt910.setDatumValute(mt103.getUplata().getDatumValute());
    	mt910.setIznos(mt103.getUplata().getIznos());
    	mt910.setIdPorukeNaloga(mt103.getIdPoruke());
    	mt910.setSifraValute(mt103.getUplata().getSifraValute());
    	
    	
    	// slanje poruke banci poverioca
    	URL wsdlLocation;
		try {
			wsdlLocation = new URL("http://localhost:" + obracunskiPoverilac.getBankaPort() + "/banka/services/Banka?wsdl");
		} catch (MalformedURLException e) {
			e.printStackTrace();
			throw new RTGSFault("Problem sa pronalazenjem wsdl-a banke");
		}
		QName serviceName = new QName("http://www.xml2017.com/banka", "BankaService");
		QName portName = new QName("http://www.xml2017.com/banka", "Banka");
		
		Service service = Service.create(wsdlLocation, serviceName);
		
		Banka bankaPoverioca = service.getPort(portName, Banka.class);
		
		bankaPoverioca.rtgsBanka(mt103, mt910);
		
		
    	// povratak u banku duznika
    	return mt900;
    }

    /* (non-Javadoc)
     * @see com.xml2017.centralna_banka.CentralnaBanka#mt102ReceiveCB(com.xml2017.schema.mt102.Mt102  mt102 )*
     */
    public com.xml2017.schema.mt900.Mt900 mt102ReceiveCB(com.xml2017.schema.mt102.Mt102 mt102) throws ClearingFault    { 
        
        //throw new ClearingFault("ClearingFault...");
    	
    	System.out.println("Izvrsavanje mt102ReceiveCB: " + 
    			mt102.getIDPoruke());
    	
    	DatabaseClient dbClient = DatabaseClientFactory.newClient("localhost",
    			8000, "admin", "admin", Authentication.DIGEST);
    	
    	Date date = new Date();
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy-HH-mm");
    	
    	XMLDocumentManager xmlDocManager = dbClient.newXMLDocumentManager();
    	
    	QueryManager queryManager = dbClient.newQueryManager();
    	
    	StringQueryDefinition queryDef = queryManager.newStringDefinition();
    	
    	
    	// Obracunski racun duznika
    	queryDef.setCriteria(mt102.getBankaDuznika().getBankAccountNumber());
    	queryDef.setCollections("/obracunski");
    	
    	SearchHandle search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		throw new ClearingFault("Nema jedan obracunski racun za banku duznika");
    	}
    	
    	String docIdObracunskiDuznik = search.getMatchResults()[0].getUri();
    	
    	JAXBContext context;
    	try {
			context = JAXBContext.newInstance(BankaObracunskiRacun.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			throw new ClearingFault("Problem sa postavljanjem JAXBContext-a");
		}
    	
    	JAXBHandle<BankaObracunskiRacun> readHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	
    	xmlDocManager.read(docIdObracunskiDuznik, readHandle);
    	
    	BankaObracunskiRacun obracunskiDuznik = readHandle.get();
    	
    	
    	// obracunski racun poverioca
    	queryDef.setCriteria(mt102.getBankaPoverioca().getBankAccountNumber());
    	
    	search = queryManager.search(queryDef, new SearchHandle());
    	
    	if (search.getMatchResults().length != 1) {
    		throw new ClearingFault("Nema jedan obracunski racun za banku poverioca");
    	}
    	
    	String docIdObracunskiPoverilac = search.getMatchResults()[0].getUri();
    	
    	readHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	
    	xmlDocManager.read(docIdObracunskiPoverilac, readHandle);
    	
    	BankaObracunskiRacun obracunskiPoverilac = readHandle.get();
    	
    	
    	// prebacivanje sredstava
    	obracunskiDuznik.setStanje(BigDecimal.valueOf(obracunskiDuznik.getStanje().doubleValue() - 
    			mt102.getUkupanIznos().doubleValue()));
    	
    	obracunskiPoverilac.setStanje(BigDecimal.valueOf(obracunskiPoverilac.getStanje().doubleValue() + 
    			mt102.getUkupanIznos().doubleValue()));
    	
    	
    	// azuriranje obracunskih racuna u bazi    	
    	DocumentMetadataHandle metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/obracunski");
    	
    	JAXBHandle<BankaObracunskiRacun> writeHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandle.set(obracunskiDuznik);
    	
    	xmlDocManager.write(docIdObracunskiDuznik, metadata, writeHandle);
    	
    	writeHandle = new JAXBHandle<BankaObracunskiRacun>(context);
    	writeHandle.set(obracunskiPoverilac);
    	
    	xmlDocManager.write(docIdObracunskiPoverilac, metadata, writeHandle);
    	
    	
    	// cuvanje mt102
    	try {
			context = JAXBContext.newInstance(Mt102.class);
		} catch (JAXBException e) {
			e.printStackTrace();
			throw new ClearingFault("Problem sa postavljanjem JAXBContext-a");
		}
    	
    	JAXBHandle<Mt102> writeHandleMt102 = new JAXBHandle<Mt102>(context);
    	writeHandleMt102.set(mt102);
    	
    	metadata = new DocumentMetadataHandle();
    	metadata.getCollections().add("/mt102");
    	
    	xmlDocManager.write("/mt102" + mt102.getIDPoruke(), metadata, writeHandleMt102);
    	
    	
    	// kreiranje mt900 i mt910   	
    	Mt900 mt900 = new Mt900();
    	mt900.setIdPoruke("mt900-" + dateFormat.format(date));
    	mt900.setBankaDuznik(mt102.getBankaDuznika());
    	mt900.setDatumValute(mt102.getDatumValute());
    	mt900.setIznos(mt102.getUkupanIznos());
    	mt900.setIdPorukeNaloga(mt102.getIDPoruke());
    	mt900.setSifraValute(mt102.getSifraValute());
    	
    	Mt910 mt910 = new Mt910();
    	mt910.setIdPoruke("mt910-" + dateFormat.format(date));
    	mt910.setBankaPoverilac(mt102.getBankaPoverioca());
    	mt910.setDatumValute(mt102.getDatumValute());
    	mt910.setIznos(mt102.getUkupanIznos());
    	mt910.setIdPorukeNaloga(mt102.getIDPoruke());
    	mt910.setSifraValute(mt102.getSifraValute());
    	
    	
    	// slanje poruke banci poverioca
    	URL wsdlLocation;
		try {
			wsdlLocation = new URL("http://localhost:" + obracunskiPoverilac.getBankaPort() + "/banka/services/Banka?wsdl");
		} catch (MalformedURLException e) {
			e.printStackTrace();
			throw new ClearingFault("Problem sa pronalazenjem wsdl-a banke");
		}
		QName serviceName = new QName("http://www.xml2017.com/banka", "BankaService");
		QName portName = new QName("http://www.xml2017.com/banka", "Banka");
		
		Service service = Service.create(wsdlLocation, serviceName);
		
		Banka bankaPoverioca = service.getPort(portName, Banka.class);
		
		bankaPoverioca.clearSettleBanka(mt102, mt910);
		
		
    	// povratak u banku duznika
    	return mt900;
    }

}
